---
description: 
globs: 
alwaysApply: true
---
# DROMA.R Package Structure

DROMA.R is an R package that provides advanced analysis functions for drug-omics associations using DromaSet and MultiDromaSet objects from the DROMA.Set package. It supports meta-analysis across multiple datasets, visualization of results, and batch processing of features.

## Key Modules

- `FuncDrugOmicPair.R`: Functions for analyzing drug-omics relationships using DromaSet objects
- `FuncBatchFeature.R`: Functions for batch analysis of features across multiple datasets
- `FuncDrugFeature.R`: Functions for drug data processing and visualization
- `FuncZscoreWhole.R`: Functions for z-score normalization
- `theme_utils.R`: Color palettes and visualization themes for consistent plotting

## Core Functions

### Data Management (via DROMA.Set)
- `createDromaSetFromDatabase()`: Creates DromaSet objects from database
- `createMultiDromaSetFromDatabase()`: Creates MultiDromaSet objects for cross-project analysis
- `loadTreatmentResponse()`: Loads drug response data from DromaSet objects
- `loadMolecularProfiles()`: Loads omics data from DromaSet objects

### Analysis Functions
- `analyzeDrugOmicPair(dromaset_object, ...)`: Analyzes association between drug response and omics feature using DromaSet objects
- `batchFindSignificantFeatures(dromaset_object, ...)`: Performs batch analysis of features using DromaSet objects
- `pairContinuousFeatures()`: Pairs continuous feature data across datasets
- `processDrugData(dromaset_object, ...)`: Processes drug sensitivity data from DromaSet objects
- `getDrugSensitivityData(dromaset_object, ...)`: Retrieves comprehensive drug sensitivity data

### Visualization
- `createForestPlot()`: Creates forest plots for meta-analysis results
- `plotMetaVolcano()`: Creates volcano plots for batch analysis results
- `plotContinuousComparison()`: Creates scatter plots for continuous data relationships
- `plotCategoryComparison()`: Creates boxplots for categorical comparisons
- `bright_palette_26`: Pre-defined palette of 26 distinct colors for consistent visualization

## Common Workflows

1. Create DromaSet objects: `createDromaSetFromDatabase()` or `createMultiDromaSetFromDatabase()`
2. Analyze drug-omics relationships: `analyzeDrugOmicPair(dromaset_object, "mRNA", "ABCB1", "Paclitaxel")`
3. Perform batch analysis: `batchFindSignificantFeatures(dromaset_object, "drug", "Paclitaxel", "mRNA")`
4. Visualize results with appropriate plotting functions using consistent color themes
5. Use MultiDromaSet for cross-project meta-analysis

## Data Types

- Drug response data: Accessed via `loadTreatmentResponse(dromaset_object, drugs = "drug_name")`
- mRNA expression: Accessed via `loadMolecularProfiles(dromaset_object, molecular_type = "mRNA")`
- Mutations: Accessed via `loadMolecularProfiles(dromaset_object, molecular_type = "mutation_gene")`
- Methylation: Accessed via `loadMolecularProfiles(dromaset_object, molecular_type = "meth")`
- Protein expression: Accessed via `loadMolecularProfiles(dromaset_object, molecular_type = "proteinrppa")`
- Copy number variation: Accessed via `loadMolecularProfiles(dromaset_object, molecular_type = "cnv")`
- Fusion data: Accessed via `loadMolecularProfiles(dromaset_object, molecular_type = "fusion")`

## Best Practices

1. Always start by creating DromaSet objects with `createDromaSetFromDatabase()` or `createMultiDromaSetFromDatabase()`
2. Use MultiDromaSet for cross-project meta-analysis to increase statistical power
3. Use batch processing for analyzing multiple features efficiently
4. When analyzing drug-omics pairs, check for sufficient sample sizes
5. Apply data type and tumor type filtering for targeted analyses
6. You may **Use `overlap_only = TRUE`** when loading cross-project data to focus on same samples
7. Apply consistent visualization themes using the provided color palettes
8. Leverage parallel processing (`cores > 1`) for large-scale batch analyses